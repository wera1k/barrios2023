setwd("G:/Tesis")
setwd("G:/Tesis/todoconbase1")
base1 <- read.csv("G:/Tesis/todoconbase1/base1.csv", header=FALSE, na.strings="#N/A")
View(base1)
source('G:/Tesis/todoconbase1/nombres1.R')
source('G:/Tesis/todoconbase1/nombres1.R')
source('~/.active-rstudio-document')
x <- base1$paciente
X
x
sample(x, size=5, replace=FALSE, prob=NULL)
sample(x, size=40, replace=FALSE, prob=NULL)
y <- sample(x, size=40, replace=FALSE, prob=NULL)
!y
y <- sample(x, size=40, replace=TRUE, prob=NULL)
y
x-y
y
y
y
y <- sample(x, size=40, replace=FALSE, prob=NULL)
Y
y
sort(y)
random.number(50)
random.number
random
?Random
random(x)
Random(x)
Random(x)
?set.seed
source('G:/Tesis/todoconbase1/valor p jitter posicion MEDIA.R')
source('G:/Tesis/todoconbase1/valor p jitter posicion MEDIA.R')
source('~/.active-rstudio-document')
y
sort(y)
y
sort(y)
random.number<-numeric(50)
numeric(50)
?runif
runif(10)
y <- sample(x, size=40, replace=TRUE, prob=NULL)
sort(y)
y <- sample(x, size=40, replace=FALSE, prob=NULL)
sort(y)
y <- sample(x, size=40, replace=FALSE, prob=NULL)
sort(y)
Y
y
y
y
sort(y)
y
y <- sample(x, size=40, replace=FALSE, prob=NULL)
sort(y)
y <- sample(x, size=40, replace=FALSE, prob=NULL)
sort(y)
is.na(y)
z <- sample(x, size=40, replace=FALSE, prob=NULL)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
y
z
sort(y)
sort(z)
sort(y)
?setdiff
setdiff(x,y)
y
sort(y)
x[-(x==y)]
?pmatch
z <- x[in.na(pmatch(x,y))]
z <- x[is.na(pmatch(x,y))]
z
source('~/.active-rstudio-document', encoding = 'UTF-8')
z <- sample(x[is.na(pmatch(x,y))],40)
print(z)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
sd(y)
sd(z)
xi <- base1$posIdealMed1 - base1$posCir
yi <- base1$posSOCMed1 - base1$posCir
xi
yi
xi1 <- xi[is.na(x1)]
xi1
xi1 <- xi[!is.na(x1)]
xi1
xi
xi1 <- xi[!is.na(xi)]
xi1
sd(xi1)
source('~/.active-rstudio-document', encoding = 'UTF-8')
xi <- sample(base1$posIdealMed1 - base1$posCir, size=40)
yi <- sample(xi[is.na(pmatch(xi, base1$posIdealMed2 - base1$posCir)],40)
xi <- sample(base1$posIdealMed1 - base1$posCir, size=40)
yi <- sample(xi[is.na(pmatch(xi, base1$posIdealMed2 - base1$posCir)],40)
xi1 <- xi[!is.na(xi)]
sd(xi1)
yi2 <- yi[!is.na(yi)]
sd(yi2)
xi <- base1$posIdealMed1 - base1$posCir
yi <- base1$posIdealMed2 - base1$posCir
xi1 <- xi[!is.na(xi)]
sd(xi1)
yi2 <- yi[!is.na(yi)]
sd(yi2)
(sd(xi1)^2)/(sd(xi2)^2)
(sd(xi1)^2)/(sd(yi2)^2)
base1$edad[sample(x)]
base1$edad[sample(x,40)]
base1$posCir[sample(x,40)]
a <- base1$posCir
b <- base1$posCir[sample(x,40)]
c <- sample(a[is.na(pmatch(a,b))],40)
a
b
c
b <- base1$posCir[sample(x,5)]
c <- sample(a[is.na(pmatch(a,b))],5)
b
c
a <- base1$posIdealMed1 - base1$posCir
b <- sample(a,5)
c <- sample(a[is.na(pmatch(a,b))],5)
a
b
c
a <- base1$posIdealMed1 - base1$posCir
b <- sample(a,40)
c <- sample(a[is.na(pmatch(a,b))],40)
a
b
c
sample(a[pmatch(a,b)],40)
pmatch(a,b)
b
c
pmatch(a,b)
pmatch(a,c)
pmatch(b,c)
a <- base1$posIdealMed1 - base1$posCir
b <- sample(a,5)
c <- sample(a[is.na(pmatch(a,b))],5)
a
b
c
pmatch(a,b)
pmatch(a,c)
pmatch(b,c)
is.na(pmatch(a,b))
is.na(pmatch(a,c))
is.na(pmatch(b,c))
b
c
a <- base1$posIdealMed1 - base1$posCir
b <- sample(a,40)
c <- sample(a[is.na(pmatch(a,b))],40)
pmatch(b,c)
pmatch(a,c)
pmatch(a,b)
x <- base1$paciente
#obtengo na muestra tamaño 40 de ese vector
y <- sample(x, size=40, replace=FALSE, prob=NULL)
print(sort(y))
#lo que busco ahora es obtener un vector z, que me de los números que no estan
#en el vector y, o sea, el complemento. De preferencia que sea tamaño 40 también
z <- sample(x[is.na(pmatch(x,y))],40)   #setdiff: es parecido a pmatch pero
print(sort(z))
pmatch(x,y)
pmatch(x,z)
pmatch(y,z)
savehistory("G:/Tesis/todoconbase1/historia pmatch para la varianza y prueba f.Rhistory")
