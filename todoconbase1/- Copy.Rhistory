getwd()
getwd()
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025IDEALvsSOC.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025.R')
source('F:/151025IDEALvsSOC.R')
source('F:/151025.R')
source('F:/151025IDEALvsSOC.R')
source('F:/151025.R')
source('~/Tesis/151025SOCvsmeds.R')
source('~/Tesis/151025SOCvsmeds.R')
source('~/Tesis/151025IDEALvsSOC.R')
source('~/Tesis/151025IDEALvsSOC.R')
source('F:/151025SOCvsmeds.R')
source('F:/151118 segments.R')
getwd()
gerwd()
ls()
source('F:/151118a.R')
source('F:/151117a.R')
source('F:/151118 segments.R')
source('F:/151118 segments.R')
source('F:/151118 segments.R')
source('F:/151118 segments.R')
source('F:/151118 segments.R')
source('F:/151118 segments.R')
source('F:/151118 segments.R')
N <- nrow(base)
source('base.csv')
getwd()
source('~/Tesis/151118 segments b.R')
source('~/Tesis/cool/analisis exploratorio.R')
base <- read.csv("F:/todo/base.csv", header=FALSE)
View(base)
source('F:/todo/nombres.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Extensión IDEAL vs Cirujano.R')
source('~/Tesis/cool/Extensión IDEAL vs Cirujano.R')
source('F:/todo/Posición IDEAL vs Cirujano.R')
getwd
getwd()
setwd("F:/todo")
getwd()
source('F:/todo/Posición IDEAL vs Cirujano.R')
source('F:/todo/Posición IDEAL vs SOC.R')
source('F:/todo/Extensión IDEAL vs SOC.R')
source('F:/todo/Extensión IDEAL vs SOC.R')
source('F:/todo/analisis exploratorio.R')
source('F:/todo/analisis exploratorio.R')
par(opar)
source('F:/todo/analisis exploratorio.R')
source('F:/todo/analisis exploratorio.R')
par(opar)
source('F:/todo/analisis exploratorio.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/Posición IDEAL vs Cirujano.R')
base <- read.csv("E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/base.csv", header=FALSE)
View(base)
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/Posición IDEAL vs Cirujano.R')
ls()
name(base)
names(base)
getwd()
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/nombres.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/nombres.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/Posición IDEAL vs Cirujano.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/Posición IDEAL vs SOC.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/Posición SOC vs Cirujano.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/Posisción Pacientes 1 - 87.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/analisis exploratorio.R')
source('E:/itam/cursos/2016-1Ene/estudiantes/tesis/NormaAdrianaTapia/analisis exploratorio.R')
install.packages("plotrix")
source('B:/estudiantes/tesis/NormaAdrianaTapia/plotPie.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/plotPie.R')
windows(9.5,9.5, xpos=-1, ypos=0)
# want to plot "polar rectangle", {(r, theta) s.t. r1 < r < r2, th1 < th < th}
cart2pol <- function(x, y) {
r <- sqrt(x^2 + y^2)
t <- atan(y/x)
cbind(r,t)
}
pol2cart <- function(r, theta) {
x <- r * cos(theta)
y <- r * sin(theta)
cbind(x, y)
}
# circular sector is a rectangle in polar coordinates
# proof of concept
par(opar)
nPts <- 100
r <- rep(1, nPts)
th <- seq(0, pi/6, length = nPts)
xy <- pol2cart(r, th)
lines(xy[,1], xy[,2], type = "l", lwd = 2)
polarRect <- function(r1, r2, th1, th2, nPts = 100) {
r <- rep(c(r1, r2, r1), c(nPts, nPts, 1))
th <- c(seq(th1, th2, length = nPts), seq(th2, th1, length = nPts), th1)
xy <- pol2cart(r, th)
}
# empty plot into which unit circle can be plotted
pdf("plotPieTEST.pdf", h = 8, w = 8)
plot(1, type = "n", axes = FALSE, ann = FALSE, pty = "s",
xlim = c(-1,1), ylim = c(-1,1))
ttt <- tearSpan("1 to 4")
# ttt as is
aSector <- polarRect(0.05, 0.2, ttt[3], ttt[4], nPts = 200)
polygon(aSector[,1], aSector[,2],
col = mycol2[2], border = NA)
# ttt swapping rad1 and rad2 (no effect)
aSector <- polarRect(0.2, 0.4, ttt[4], ttt[3], nPts = 200)
polygon(aSector[,1], aSector[,2],
col = mycol2[1], border = NA)
# ttt swap rad1 and rad2, make sure rad2 < rad1
aSector <- polarRect(0.4, 0.6, ttt[4]-2*pi, ttt[3], nPts = 200)
polygon(aSector[,1], aSector[,2],
col = mycol2[3], border = NA)
# ttt as is but ensure rad2 < rad1
aSector <- polarRect(0.6, 0.7, ttt[3], ttt[4] - 2*pi, nPts = 200)
polygon(aSector[,1], aSector[,2],
col = mycol2[4], border = NA)
dev.off()
aSector <- polarRect(0.4, 0.8, -pi/4, pi/3, nPts = 200)
polygon(aSector, col = rgb(1, 0, 0, 1.0), border = NA)
aSector <- polarRect(0.3, 0.9, -pi/2, pi/6, nPts = 200)
polygon(aSector, col = rgb(0, 0, 1, 0.8), border = NA)
cc <- dd[, c(1:7, grep("clock", names(dd)))]
cc$clock.sx
hh2rad <- function(y) pi/2 * ((4 - (y - 3)/3) %% 4)
tearSpan <- function(x) {
# want: 3|6|9|12 to map to pi/2 * (0|3|2|1)
# logic:  start     -3      /3      4-       %% 4
#    get 3|6|9|12 0|3|6|9 0|1|2|3 4|3|2|1  0|3|2|1
hh2rad <- function(y) pi/2 * ((4 - (y - 3)/3) %% 4)
x <- as.character(x)
x <- gsub("(.*) and .*", "\\1", x)	# keep only first tear
ab <- strsplit(x, " to ")
a <- as.numeric(unlist(lapply(ab, "[", 1)))# %% 12
b <- as.numeric(unlist(lapply(ab, "[", 2)))# %% 12
b[is.na(b)] <- a[is.na(b)]	# make pointwise tears (e.g. "2" -> "2 to 2")
rad1 <- hh2rad(a)
rad2 <- hh2rad(b)
# ensure rad1 > rad2
bad <- which(rad2 > rad1)
rad2[bad] <- rad2[bad] - 2*pi
}
cbind(a, b, rad1, rad2)
ttt <- tearSpan(cc$clock.sx)
head(pi/2 * (4 - (ttt[,1] - 3)/3))
# TS = tear span
TSdb.0 <- tearSpan(cc$DB_clock.SOC)
TSdb.1 <- tearSpan(cc$DB_clock.IDL)
TSkd.0 <- tearSpan(cc$KD_clock.SOC)
TSrk.0 <- tearSpan(cc$RK_clock.SOC)
TSrk.1 <- tearSpan(cc$RK_clock.IDL)
TSjd.0 <- tearSpan(cc$JD_clock.SOC)
pdf("plotPie.pdf", h=8, w=8)
# n = 87 subjects, so let's pack into 10 x 10 grid
# circle centers
y0 <- c(rep(10:3, each=10), rep(2, 7))
par(mar = c(0, 0, 0, 0))
plot(1, type = "n", axes = FALSE, ann = FALSE, pty = "s",
# subset of interesting/problematic cases
probl <- c(1:4, 7, 15, 21, 23:28)
#for (i in probl) {
# radius span 0-0.55 for surgeon, so that it protrudes past readers
if (!is.na(TSsx[i,3])) {
aSector <- polarRect(0, 0.55, TSsx[i,3], TSsx[i,4], nPts = 200)
col = gray(0.9), border = NA)
# DB SOC
if (!is.na(TSdb.0[i,3])) {
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
}
# DB IDL
aSector <- polarRect(0.4, 0.45, TSdb.1[i,3], TSdb.1[i,4], nPts = 200)
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
col = mycol2[2], border = NA)
# KD SOC
aSector <- polarRect(0.35, 0.4, TSkd.0[i,3], TSkd.0[i,4], nPts = 200)
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
}
# KD IDL
if (!is.na(TSkd.1[i,3])) {
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
col = mycol2[4], border = NA)
}
if (!is.na(TSrk.0[i,3])) {
aSector <- polarRect(0.25, 0.3, TSrk.0[i,3], TSrk.0[i,4], nPts = 200)
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
}
# RK IDL
if (!is.na(TSrk.1[i,3])) {
aSector <- polarRect(0.2, 0.25, TSrk.1[i,3], TSrk.1[i,4], nPts = 200)
col = mycol2[6], border = NA)
}
# JD SOC
aSector <- polarRect(0.15, 0.2, TSjd.0[i,3], TSjd.0[i,4], nPts = 200)
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
col = mycol2[7], border = NA)
# JD IDL
if (!is.na(TSjd.1[i,3])) {
aSector <- polarRect(0.1, 0.15, TSjd.1[i,3], TSjd.1[i,4], nPts = 200)
col = mycol2[8], border = NA)
}
}
legend("bottomright", lty = 1, lwd = 3, col = c(gray(0.9), mycol2[1:8]),
c("Surgeon", paste(rep(c("DB", "KD", "RK", "JD"), each = 2),
rep(c("SOC", "IDL"), 4), sep = ".")),
dev.off()
cbind(probl, cc[probl,])
cbind(probl, TSsx[probl,], TSdb.0[probl,], TSdb.1[probl,])
x0 <- c(rep(1:10, 8), 1:7)
TSsx <- tearSpan(cc$clock.sx)
col = mycol2[3], border = NA)
# text(x0[probl], y0[probl], (1:nrow(cc))[probl])
ncol = 3, bty = "n", cex = 0.8)
aSector <- polarRect(0.3, 0.35, TSkd.1[i,3], TSkd.1[i,4], nPts = 200)
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
if (!is.na(TSkd.0[i,3])) {
# RK SOC
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
}
if (!is.na(TSdb.1[i,3])) {
xlim = c(0,11), ylim = c(0,11))
polygon(x0[i] + aSector[,1], y0[i] + aSector[,2],
}
col = mycol2[5], border = NA)
col = mycol2[1], border = NA)
}
TSkd.1 <- tearSpan(cc$KD_clock.IDL)
text(x0, y0, 1:nrow(cc), cex = 0.8)
aSector <- polarRect(0.45, 0.5, TSdb.0[i,3], TSdb.0[i,4], nPts = 200)
TSjd.1 <- tearSpan(cc$JD_clock.IDL)
}
if (!is.na(TSjd.0[i,3])) {
for (i in 1:nrow(cc)) {
if (length(bad) > 0) {
?%%
help("%%")
?rainbow
rainbow(8)
?polygon
setwd("B:/estudiantes/tesis/NormaAdrianaTapia")
base1 <- read.csv("B:/estudiantes/tesis/NormaAdrianaTapia/base1.csv", header=FALSE)
View(base1)
View(base1)
base1 <- read.csv("B:/estudiantes/tesis/NormaAdrianaTapia/base1.csv", header=FALSE, na.strings="#N/A")
View(base1)
source('B:/estudiantes/tesis/NormaAdrianaTapia/precisión Extensión.R', echo=TRUE)
source('B:/estudiantes/tesis/NormaAdrianaTapia/nombres1.R', echo=TRUE)
source('B:/estudiantes/tesis/NormaAdrianaTapia/precisión Extensión.R', echo=TRUE)
library(BHH2)
ls(,2)
dotPlot(rnorm(100))
dotPlot(rnorm(500))
dotPlot(rnorm(500))
abline(v=1,lty=3,col=2)
names(base1)
source('B:/estudiantes/tesis/NormaAdrianaTapia/precisión Extensión.R', echo=TRUE)
X <- matrix(rnorm(500),ncol=4)
dim(X)
quantile(X)
?quantile
quantile(X,probs=seq(.75,1.00,length=6))
r1s
X <- matrix(c(r1s,r2s,r3s,r4s),ncol=4)
dim(X)
tail(r4s)
tail(X)
quantile(X,probs=seq(.75,1.00,length=6))
quantile(X,probs=seq(.75,1.00,by=0.05))
quantile(X,probs=seq(.75,1.00,by=0.025))
which(X > 5)
length(which(X > 5))
length(which(X > 5))/500
dim(X)
length(which(X > 5))/2000
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R', echo=TRUE)
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
source('B:/estudiantes/tesis/NormaAdrianaTapia/valor p jitter posicion MEDIA.R')
y <- rnorm(400)
rep(seq(4),100)
factor(rep(seq(4),100))
x <- factor(rep(seq(4),100))
fx <- factor(rep(seq(4),100))
x <- rep(seq(4),100)
summary(lm(y~x))
anova(lm(y~x))
summary(lm(y~fx))
anova(lm(y~fx))
